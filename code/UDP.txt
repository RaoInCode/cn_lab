// UDPClient.java

// Import the networking libraries
import java.io.*;
import java.net.*;
import java.util.Scanner;

public class UDPClient {

  public static void main(String[] args) throws IOException {
    DatagramPacket sendPacket;
    byte[] sendData;
    // Create a Datagram Socket
    DatagramSocket clientSocket = new DatagramSocket();
    // Set client timeout to be 1 second
    clientSocket.setSoTimeout(1000);
    Scanner input = new Scanner(System.in);
    while (true) {
      String cmd = input.nextLine();
      // If client types quit, close the socket and exit
      if (cmd.equals("QUIT")) {
        clientSocket.close();
        System.exit(1);
      }
      sendData = cmd.getBytes();
      sendPacket = new DatagramPacket(sendData, sendData.length, InetAddress.getByName("127.0.0.1"), 5001);
      clientSocket.send(sendPacket);
    }
  }
}


-------------------------------------------------------------------------------------------------------------------------------------



// UDPServer.java

import java.io.*;
import java.net.*;
import java.sql.Timestamp;

public class UDPServer {
  public static void main(String[] args) throws IOException {
    DatagramSocket serverSocket = new DatagramSocket(Integer.parseInt("5001"));
    System.out.println("Server Started. Listening for Clients on port 5001" + "...");
    // Assume messages are not over 1024 bytes
    byte[] receiveData = new byte[1024];
    DatagramPacket receivePacket;
    while (true) {
      // Server waiting for clients message
       receivePacket = new DatagramPacket(receiveData, receiveData.length);
       serverSocket.receive(receivePacket);
      // Get the client's IP address and port
      InetAddress IPAddress = receivePacket.getAddress();
      int port = receivePacket.getPort();
      // Convert Byte Data to String
      String clientMessage = new String(receivePacket.getData(),0,receivePacket.getLength());
      // Print the message with log header
      Timestamp timestamp = new Timestamp(System.currentTimeMillis());
      System.out.println("[" + timestamp.toString() + " ,IP: " + IPAddress + " ,Port: " + port +"]  " + clientMessage);
    }
  }
}